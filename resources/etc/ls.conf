# The port on which to listen for requests.
port=8080

# The hostname of the service
host.name="localhost"

# The default error code to use for exception responses.
default.error.code="LOC:RUE-0001"

# How long http-kit should wait to return a response from a provider.
http.client.timeout=500

# The top level location of shapefiles.
shapefile.path="resources/shapefiles"

# The top level location of geo-packages.
geopackage.path="resources/geopackage"

# The top level location of geocode mappings.
mapping.path="resources/mappings"

# A list of shapefiles not accessible by users.
shapefile.blacklist=""

# How long to keep the shapefiles cached in memory. Used for memoization in the Clojure code.
shapefile.time.to.live=86400

# Declare additional attributes to retrieve from pws shapefile
shapefile.additional.attributes.pws="LAT,LON"

# Specifies a list of keys to zip with the attributes to form the final map.
shapefile.additional.attributes.mask.pws="stationId,latitude,longitude"

# Declare additional attributes to retrieve from adminDistrict1 shapefile
shapefile.additional.attributes.adminDistrict1="ST_CD"

# Specifies a list of keys to zip with the attributes to form the final map.
shapefile.additional.attributes.mask.adminDistrict1="adminDistrict,adminDistrictCode"

# Declare additional attributes to retrieve from country shapefile
shapefile.additional.attributes.country="ISO_CC"

# Specifies a list of keys to zip with the attributes to form the final map.
shapefile.additional.attributes.mask.country="country,countryCode"

# Declare additional attributes to retrieve from airport shapefile
shapefile.additional.attributes.airport="LATITUDE,LONGITUDE,IATA,ICAO"

# Specifies a list of keys to zip with the attributes to form the final map.
shapefile.additional.attributes.mask.airport="airportName,latitude,longitude,iataCode,icaoCode"

# Declare additional attributes to retrieve from county shapefile
shapefile.additional.attributes.county="CNTY_ID,LATITUDE,LONGITUDE"

# Specifies a list of keys to zip with the attributes to form the final map.
shapefile.additional.attributes.mask.county="countyName,countyId,latitude,longitude"

# Declare additional attributes to retrieve from zone shapefile
shapefile.additional.attributes.zone="ZONE_ID,LATITUDE,LONGITUDE"

# Specifies a list of keys to zip with the attributes to form the final map.
shapefile.additional.attributes.mask.zone="zoneName,zoneId,latitude,longitude"

# Declare additional attributes to retrieve from ski shapefile
shapefile.additional.attributes.postalKey="POSTAL_CD"

# Specifies a list of keys to zip with the attributes to form the final map.
shapefile.additional.attributes.mask.postalKey="postalKey,postalCode"

# Declare additional attributes to retrieve from ianaTimeZone shapefile
shapefile.additional.attributes.ianaTimeZone="DST_START,DST_END"

# Specifies a list of keys to zip with the attributes to form the final map.
shapefile.additional.attributes.mask.ianaTimeZone="ianaTimeZone,dstStart,dstEnd"

# Declare additional attributes to retrieve from ianaTimeZone shapefile
shapefile.additional.attributes.observation="ST_CD,ELEV_M,OBS_TYPE,LATITUDE,LONGITUDE,OBS_ID,ISO_CC"

# Specifies a list of keys to zip with the attributes to form the final map.
shapefile.additional.attributes.mask.observation="stationName,adminDistrictCode,Elevation,obsType,latitude,longitude,stationId,countryCode"

# Declare additional attributes to retrieve from ski shapefile
shapefile.additional.attributes.ski="SKI_ID,LATITUDE,LONGITUDE,ISO_CC,ST_CD,IANA_TZ"

# Specifies a list of keys to zip with the attributes to form the final map.
shapefile.additional.attributes.mask.ski="skiName,skiId,latitude,longitude,countryCode,adminDistrictCode,ianaTimeZone"

# Specifies a single attribute to be used when key is requested.
shapefile.key.zone="zoneId"
shapefile.key.zoneId="zoneId"
shapefile.key.countyId="countyId"
shapefile.key.county="countyId"
shapefile.key.airport="icaoCode"
shapefile.key.ski="skiId"
shapefile.key.observation="stationId"
shapefile.key.airport="airportId"
shapefile.key.pws="stationId"

# Specifies the attribute to use when a key is requested.
shapefile.key.attribute.zoneId="ZONE_ID"
shapefile.key.attribute.zone="ZONE_ID"
shapefile.key.attribute.countyId="CNTY_ID"
shapefile.key.attribute.county="CNTY_ID"

# A list of values for which the identity value is to be returned for a geohittest request.
geohittest.identity.values="location"

# A list of values for which the identity value is to be returned for a pointmap request.
pointmap.identity.values="geocode,placeid"

# A list of mapping files which should be loaded at startup-time
pointmap.preloaded.mappings="locId,postalKey,zoneId,postalPlace"

#A list of the value upon which a search can be filtered.
search.filter.values="countryCode,adminDistrictCode"

# A list of the countries which we will extract region code for.
search.filter.adminDistrictCode.countries="US"

# How many threads http-kit allocates to serving responses.
server.threads=128

# How many connections can be queued up simultaneously.
server.queue.size=50000

# The name prefix for worker threads created by http-kit
server.worker.name.prefix="sun-ms-"

# Field Aliases

# Product aliases are single values composed of multiple shapefiles worth of data. Example; an alert could contain a county code and a zone id.
product.alerts="county,zone"
product.city="adminDistrict3"
product.locality="adminDistrict3"
product.airportName="airport"
product.zoneId="zone"
product.countyId="county"
product.ski="ski"

linestring.products="trafficSegments"
near.products="pws,airport,ski,observation"

near.pws.radius=10
near.pws.results.max=40

near.airport.radius=7
near.airport.results.max=5

near.ski.radius=6
near.ski.results.max=20

near.observation.radius=8
near.observation.results.max=40

# List of products of which the shapefiles had to be split into multiples.
multiple.shapefiles.products="adminDistrict3"

reverse.geocoder.shapefiles="country,adminDistrict3,adminDistrict1,adminDistrict2,postalKey,ianaTimeZone"
reverse.geocoder.fields="country,city,adminDistrict,county,postalKey,ianaTimeZone"

# Lists specific api's required fields for validation purposes. Api's validate by controller are not listed.
requiredFields.hit-test="geocode,product,format"
requiredFields.point-map="type,id,format"
requiredFields.resolve="type,id,product,format"
requiredFields.intersection="type,id,product,overlay"
requiredFields.boundary="product,format"
requiredFields.near="product"
requiredFields.search="query,language,format"
#requiredFields.typeahead="adn1,adn2,adn3,adn4,adn5,stateabbrev,place,placeshingle,placeauto,pclass,boost,region"

# Items that can be looked up using the catalog route
catalog.items="product,type,overlay"

# The maximum size of a cache. Not currently used.
default.cache.capacity=1000000

# The length of time an item should remain in cache when using time based caching algorithms.
default.time.to.live=86400
default.time.to.live.v2=86400

# Same as above but for IP address lookup.
default.ip.time.to.live=3600

error.ttl=300

responseData.kml.xmlns="http://www.opengis.net/kml/2.2"
responseData.kml.xmlVersion="1.0"
responseData.kml.xmlEncoding="UTF-8"


## Geo Location Lookup

# The mapping provider to use for location lookups.
provider.priority="geocoder,geocoder-internal"

geoLocation.lookup.provider.internal.enable=true
geoLocation.lookup.provider.name="mapbox"
geoLocation.lookup.provider.name.internal="internal"
geoLocation.lookup.provider.name.v2="mapbox"

# A listing of all fields to pull from a location provider. Needed for validation of requests in the lookup API.
geoLocation.lookup.fields="latitude,longitude,address,adminDistrict,adminDistrict2,country,countryCode,city,postalCode"

# A listing of the additional fields to add to all of the geoLocation responses.
geoLocation.lookup.fields.added="postalKey,ianaTimeZone"

# A listing of field names that are needed conditionally- for example airportName only shows up when icaoCode or iataCode is used in the parameters
geoLocation.lookup.fields.conditional="airportName"

# Corresponds with the geoLocation.lookup.fields.conditional list- lists out the parameter values that require the specified field
geoLocation.lookup.fields.airportName="icaoCode,iataCode"
geoLocation.lookup.fields.airportName.keys="airportName"

# Keys which should be in the metadata portion of the response
geoLocation.lookup.metadata.keys="version,transaction_id,generated_time,total_cache_time_secs,status_code,language,address,latitude,longitude,format"

# Keys which should be in each map in the address vector portion of the response
geoLocation.lookup.response.keys.v2="latitude,longitude,address,locality,admin_district,postal_code,country,country_code,place_id,admin_district_code,admin_district_name,display_name,feature"
geoLocation.lookup.response.keys="latitude,longitude,address,city,locale,neighborhood,adminDistrict,adminDistrictCode,postalCode,postalKey,country,countryCode,ianaTimeZone,displayName"

geoLocation.lookup.response.addRequired="postcode"

geoLocation.lookup.response.addRequired="city"
geoLocation.lookup.response.v2.required="locality"

# Bing Provider Config
geoLocation.lookup.bing.forwardgeo.prefix="http://dev.virtualearth.net/REST/v1/Locations/"
geoLocation.lookup.bing.reversegeo.prefix="http://dev.virtualearth.net/REST/v1/Locations/"
geoLocation.lookup.bing.suffix=""
geoLocation.lookup.bing.apiKey="AjYRc8eoG27Zm5Obmrhd9uIwMdmGvSrP6_9ZCY3ZoL19OFPKnWNfO-Tsx4ueTU7W"
geoLocation.lookup.bing.maxResults=20
geoLocation.lookup.bing.reverseGeo.Granularity=""
geoLocation.lookup.bing.addressFilter="Street"
geoLocation.lookup.bing.data.keys="point,address"

# Mapbox Provider Config
geoLocation.lookup.mapbox.forwardgeo.prefix="https://api.mapbox.com/geocoding/v5/mapbox.places/"
geoLocation.lookup.mapbox.reversegeo.prefix="https://api.mapbox.com/geocoding/v5/mapbox.places/"
geoLocation.lookup.mapbox.suffix=""
geoLocation.lookup.mapbox.apiKey="pk.eyJ1Ijoid2VhdGhlciIsImEiOiJjaWxtaHN0Z3U2NmlndXRtMDVyeHoyeHNoIn0.cWl0ItkGKb2cEagmkBM7Ug"
geoLocation.lookup.mapbox.maxResults=20
geoLocation.lookup.mapbox.reverseGeo.Granularity=""

geoLocation.lookup.mapbox.filter.languageMode="strict"
geoLocation.lookup.mapbox.filter.languageMode.routes="search,searchflat,forward-geo"
geoLocation.lookup.mapbox.filter.locale="locality,postcode,neighborhood,district,place"
geoLocation.lookup.mapbox.filter.city="place"
geoLocation.lookup.mapbox.filter.place="place"
geoLocation.lookup.mapbox.filter.address="address"
geoLocation.lookup.mapbox.filter.neighborhood="neighborhood"
geoLocation.lookup.mapbox.filter.locality="locality"
geoLocation.lookup.mapbox.filter.postcode="postcode"
geoLocation.lookup.mapbox.filter.region="region"
geoLocation.lookup.mapbox.filter.district="district"

geoLocation.lookup.mapbox.default.types="place,region,postcode,neighborhood,locality,district"
geoLocation.lookup.mapbox.data.keys="context,center,place_name,place_type,id,text,properties"

geoLocation.lookup.mapbox.displayName.override.route="map-point,search"
geoLocation.lookup.mapbox.displayName.override.country="US,CA"


# Elastic
geoLocation.lookup.elastic.enable=true
geoLocation.lookup.elastic.endpoint="http://location-dev-useast1-elastic.dev.sun.weather.com/"
geoLocation.lookup.elastic.index="loc"
geoLocation.lookup.elastic.type="loc"
geoLocation.lookup.elastic.maxResults=10
geoLocation.lookup.elastic.shards=1
geoLocation.lookup.elastic.replicas=1
geoLocation.lookup.elastic.timeout=5
geoLocation.lookup.elastic.threads=4
geoLocation.lookup.elastic.connperhost=2

geoLocation.lookup.elastic.profile.index=".profile"
geoLocation.lookup.elastic.profile.type="profile-mapping"
geoLocation.lookup.elastic.profile.default="default"
geoLocation.lookup.elastic.profile.ttl=1800

# IP Address Lookup
ipaddress.lookup.provider.name="neustar"
ipaddress.lookup.neustar.endPoint="http://api.neustar.biz/ipi/gpp/v1/ipinfo/"
ipaddress.lookup.neustar.apiKey="220.1.5692e8c4e4b005ca242356f0.yuvXw5DHA"
ipaddress.lookup.neustar.sharedSecret="DhuFFy5N"

# A list of the supported return type of location service responses.
supportedFormats="json,esi,geojson,kml"

# A list of the supported locationTypes to pass in the request depending on the specific provider
supportedLocationTypes.mapbox="address,city,locale"
supportedLocationTypes.internal="address,city,locale"

# The location where DevOps will place their configuration files to override settings.
devops.config.path="etc/"

#Declares whether shapefile lookup will create a .qix index file.  Needs to be false in read-only environments.
create.index=false

#Declares whether shapefiles will use memory map
memory.mapped=false

# Error codes, messages, and statuses used throughout the application
error-code.default.code="LOC:RUE-0001"
error-code.default.message="There was an error processing your request. Please try again later."
error-code.default.status=500

error-code.missing-field.code="LOC:MIF-0006"
error-code.missing-field.message="One or more of the required fields are missing."
error-code.missing-field.status=400

error-code.unsupported-values.code="LOC:PVE-0005"
error-code.unsupported-values.message="Unsupported value(s):"
error-code.unsupported-values.status=400

error-code.bad-ip-address.code="LOC:IIF-0001"
error-code.bad-ip-address.message="Invalid IP address."
error-code.bad-ip-address.status=400

error-code.not-found.code="LOC:NFE-0001"
error-code.not-found.message="The resource requested could not be located. Please verify the URL and try again later."
error-code.not-found.status=404

error-code.timeout.code="LOC:TME-0001"
error-code.timeout.message="The server failed to respond within the timeout threshold. Please try again shortly."
error-code.timeout.status=408

error-code.unavailable.code="LOC:UNV-0001"
error-code.unavailable.message="The service is unavailable. Please try again shortly."
error-code.unavailable.status=503

error-code.provider-error.code="LOC:PVE-0001"
error-code.provider-error.message="The service is unavailable due to a provider error. Please try again shortly."
error-code.provider-error.status=503

error-code.null-parameter.code="LOC:NUL-0001"
error-code.null-parameter.message="The following parameter(s) need values:"
error-code.null-parameter.status=400
